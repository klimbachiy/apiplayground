{"version":3,"sources":["Covidcard.js","Covid.js","App.js","serviceWorker.js","index.js","covid.jpg"],"names":["Covidcard","className","this","props","color","style","maxWidth","float","margin","textAlign","header","number","date","React","Component","Covid","handleClick","fetch","method","then","res","json","data","setState","infected","confirmed","value","recovered","death","deaths","lastUpdate","catch","err","console","log","state","position","left","onClick","App","src","Corona","alt","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"mNAgBeA,E,uKAZP,OACA,yBAAKC,UAAWC,KAAKC,MAAMC,MAAOC,MAAO,CAACC,SAAS,QAAQC,MAAM,OAAOC,OAAO,OAAOC,UAAU,WAC5F,yBAAKR,UAAU,eAAeC,KAAKC,MAAMO,QACzC,yBAAKT,UAAU,aACX,wBAAIA,UAAU,cAAcC,KAAKC,MAAMQ,QACvC,uBAAGV,UAAU,aAAb,iBAAwCC,KAAKC,MAAMS,Y,GAP3CC,IAAMC,WCuCfC,E,kDArCX,aAAc,IAAD,8BACT,gBAWJC,YAAY,WACRC,MAAM,iDAAiD,CACnDC,OAAO,QACRC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAChBF,MAAK,SAAAG,GACF,EAAKC,SAAS,CACVC,SAASF,EAAKG,UAAUC,MACxBC,UAAUL,EAAKK,UAAUD,MACzBE,MAAMN,EAAKO,OAAOH,MAClBd,KAAKU,EAAKQ,gBAEfC,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,OArB1B,EAAKG,MAAM,CACPX,SAAS,EACTG,UAAU,EACVC,MAAM,EACNhB,KAAK,MANA,E,gEAUTV,KAAKc,gB,+BAgBL,OACI,yBAAKX,MAAO,CAAC+B,SAAS,QAAQC,KAAK,QAC/B,kBAAC,EAAD,CAAW3B,OAAO,WAAWN,MAAM,iCAAiCO,OAAQT,KAAKiC,MAAMX,SAAUZ,KAAMV,KAAKiC,MAAMvB,OAClH,kBAAC,EAAD,CAAWF,OAAO,YAAYN,MAAM,kCAAkCO,OAAQT,KAAKiC,MAAMR,UAAWf,KAAMV,KAAKiC,MAAMvB,OACrH,kBAAC,EAAD,CAAWF,OAAO,QAAQN,MAAM,+BAA+BO,OAAQT,KAAKiC,MAAMP,MAAOhB,KAAMV,KAAKiC,MAAMvB,OAC1G,4BAAQX,UAAU,gCAAgCqC,QAASpC,KAAKc,mB,GAhC5DH,IAAMC,W,gBCaXyB,MAZf,WACE,OACE,yBAAKtC,UAAU,OACb,yBAAKI,MAAO,CAACI,UAAU,WACrB,6CACA,yBAAK+B,IAAKC,IAAQC,IAAI,SAASrC,MAAO,CAACsC,aAAa,UAEpD,kBAAC,EAAD,QCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACL1B,QAAQ0B,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.e8e3feaa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Covidcard extends React.Component{\r\n    render(){\r\n        return(\r\n        <div className={this.props.color} style={{maxWidth:\"18rem\",float:\"left\",margin:\"20px\",textAlign:\"center\"}}>\r\n            <div className=\"card-header\">{this.props.header}</div>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{this.props.number}</h5>\r\n                <p className=\"card-text\">last Updated: {this.props.date}</p>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Covidcard;","import React from 'react';\r\nimport Covidcard from './Covidcard';\r\n\r\nclass Covid extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            infected:0,\r\n            recovered:0,\r\n            death:0,\r\n            date:null\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.handleClick();\r\n    }\r\n    handleClick=()=>{\r\n        fetch('https://covid19.mathdro.id/api/countries/india',{\r\n            method:'GET'\r\n        }).then(res=>res.json())\r\n        .then(data=>{\r\n            this.setState({\r\n                infected:data.confirmed.value,\r\n                recovered:data.recovered.value,\r\n                death:data.deaths.value,\r\n                date:data.lastUpdate\r\n            })\r\n        }).catch(err=>console.log(err))\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{position:\"fixed\",left:\"10%\"}}>\r\n                <Covidcard header=\"Infected\" color=\"card text-white bg-danger mb-3\" number={this.state.infected} date={this.state.date}/>\r\n                <Covidcard header=\"Recovered\" color=\"card text-white bg-success mb-3\" number={this.state.recovered} date={this.state.date}/>\r\n                <Covidcard header=\"Death\" color=\"card text-white bg-dark mb-3\" number={this.state.death} date={this.state.date}/>\r\n                <button className=\"fa fa-refresh btn btn-primary\" onClick={this.handleClick}></button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Covid;","import React from 'react';\nimport Covid from './Covid'\nimport Corona from './covid.jpg'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={{textAlign:\"center\"}}>\n        <h1>COVID UPDATES</h1>\n        <img src={Corona} alt=\"corona\" style={{borderRadius:\"50%\"}}></img>\n      </div>\n        <Covid/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/covid.26f042ce.jpg\";"],"sourceRoot":""}